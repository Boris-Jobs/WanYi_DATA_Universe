/*
 * Oceanengine Open Api
 * 巨量引擎开放平台 Open Api
 *
 * The version of the OpenAPI document: 1.0.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bytedance.ads.model;

import java.util.Objects;
import java.util.Arrays;
import com.bytedance.ads.model.FileMediaGetV2FilteringExternalAction;
import com.bytedance.ads.model.FileMediaGetV2FilteringMediaName;
import com.bytedance.ads.model.FileMediaGetV2FilteringStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.bytedance.ads.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "com.org.bytedance.ad_open_sdk.JavacusGenerator", date = "2024-01-10T18:05:36.409643208+08:00[PRC]")
public class FileMediaGetV2Filtering {
  public static final String SERIALIZED_NAME_EXTERNAL_ACTION = "external_action";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACTION)
  private FileMediaGetV2FilteringExternalAction externalAction = null;

  public static final String SERIALIZED_NAME_MEDIA_NAME = "media_name";
  @SerializedName(SERIALIZED_NAME_MEDIA_NAME)
  private FileMediaGetV2FilteringMediaName mediaName = null;

  public static final String SERIALIZED_NAME_MEDIA_USER_ID = "media_user_id";
  @SerializedName(SERIALIZED_NAME_MEDIA_USER_ID)
  private String mediaUserId = null;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<FileMediaGetV2FilteringStatus> status = null;

  public FileMediaGetV2Filtering() {
  }

  public FileMediaGetV2Filtering externalAction(FileMediaGetV2FilteringExternalAction externalAction) {
    
    this.externalAction = externalAction;
    return this;
  }

   /**
   * Get externalAction
   * @return externalAction
  **/
  @javax.annotation.Nonnull
  public FileMediaGetV2FilteringExternalAction getExternalAction() {
    return externalAction;
  }


  public void setExternalAction(FileMediaGetV2FilteringExternalAction externalAction) {
    this.externalAction = externalAction;
  }


  public FileMediaGetV2Filtering mediaName(FileMediaGetV2FilteringMediaName mediaName) {
    
    this.mediaName = mediaName;
    return this;
  }

   /**
   * Get mediaName
   * @return mediaName
  **/
  @javax.annotation.Nonnull
  public FileMediaGetV2FilteringMediaName getMediaName() {
    return mediaName;
  }


  public void setMediaName(FileMediaGetV2FilteringMediaName mediaName) {
    this.mediaName = mediaName;
  }


  public FileMediaGetV2Filtering mediaUserId(String mediaUserId) {
    
    this.mediaUserId = mediaUserId;
    return this;
  }

   /**
   * 
   * @return mediaUserId
  **/
  @javax.annotation.Nonnull
  public String getMediaUserId() {
    return mediaUserId;
  }


  public void setMediaUserId(String mediaUserId) {
    this.mediaUserId = mediaUserId;
  }


  public FileMediaGetV2Filtering status(List<FileMediaGetV2FilteringStatus> status) {
    
    this.status = status;
    return this;
  }

  public FileMediaGetV2Filtering addStatusItem(FileMediaGetV2FilteringStatus statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>(Arrays.asList(FileMediaGetV2FilteringStatus.OPEN_VISIBLE, FileMediaGetV2FilteringStatus.SELF_VISIBLE, FileMediaGetV2FilteringStatus.FRIENDS_VISIBLE));
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * 
   * @return status
  **/
  @javax.annotation.Nullable
  public List<FileMediaGetV2FilteringStatus> getStatus() {
    return status;
  }


  public void setStatus(List<FileMediaGetV2FilteringStatus> status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileMediaGetV2Filtering fileMediaGetV2Filtering = (FileMediaGetV2Filtering) o;
    return Objects.equals(this.externalAction, fileMediaGetV2Filtering.externalAction) &&
        Objects.equals(this.mediaName, fileMediaGetV2Filtering.mediaName) &&
        Objects.equals(this.mediaUserId, fileMediaGetV2Filtering.mediaUserId) &&
        Objects.equals(this.status, fileMediaGetV2Filtering.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalAction, mediaName, mediaUserId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileMediaGetV2Filtering {\n");
    sb.append("    externalAction: ").append(toIndentedString(externalAction)).append("\n");
    sb.append("    mediaName: ").append(toIndentedString(mediaName)).append("\n");
    sb.append("    mediaUserId: ").append(toIndentedString(mediaUserId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("external_action");
    openapiFields.add("media_name");
    openapiFields.add("media_user_id");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("external_action");
    openapiRequiredFields.add("media_name");
    openapiRequiredFields.add("media_user_id");
  }


  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileMediaGetV2Filtering.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileMediaGetV2Filtering' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileMediaGetV2Filtering> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileMediaGetV2Filtering.class));

       return (TypeAdapter<T>) new TypeAdapter<FileMediaGetV2Filtering>() {
           @Override
           public void write(JsonWriter out, FileMediaGetV2Filtering value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileMediaGetV2Filtering read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileMediaGetV2Filtering given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileMediaGetV2Filtering
  * @throws IOException if the JSON string is invalid with respect to FileMediaGetV2Filtering
  */
  public static FileMediaGetV2Filtering fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileMediaGetV2Filtering.class);
  }

 /**
  * Convert an instance of FileMediaGetV2Filtering to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

